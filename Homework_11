// -----------------
//Двойная очередь/Deque

struct Deque<Element> {
    private var container: [Element] = []
    
    var isEmpty: Bool { return container.isEmpty }     
    var size: Int { return container.count }   
    var head: Element? { return container.first }  
    var tail: Element? { return container.last }   
    
    mutating func addToHead(_ element: Element) {
        container.insert(element, at: 0)
    }
    
    mutating func addToEnd(_ element: Element) {
        container.append(element)
    }
    
    mutating func removeFromHead() -> Element? {
        guard !isEmpty else {
            return nil
        }
        return container.removeFirst()
    }
    
    mutating func removeFromEnd() -> Element? {
        guard !isEmpty else {
            return nil
        }
        return container.removeLast()
    }
}


// -----------------
//Двойная очередь с уникальными элементами/Unique Deque (Hashable)

struct UniqueDeque<Element: Hashable> {
    private var container: [Element] = []
    var set = Set<Element>()
    
    var isEmpty: Bool { return container.isEmpty }     
    var size: Int { return container.count }   
    var head: Element? { return container.first }  
    var tail: Element? { return container.last }

    func isExist(_ element: Element) -> Bool {
        return set.contains(element)
    } 

    mutating func removeFromSet(_ element: Element) {
    for setElement in set {
        if setElement == element {
            set.remove(setElement)
            }
        }
    }
    
    mutating func addToHead(_ element: Element) -> () {
        guard !isExist(element) else {
            return print("This element has already exist")
        }
        container.insert(element, at: 0)
        set.insert(element)
        print("Element was added!")
    }
    
    mutating func addToEnd(_ element: Element) -> () {
        guard !isExist(element) else {
            return print("This element has already exist")
        }
        container.append(element)
        set.insert(element)
        print("Element was added!")
    }
    
    mutating func removeFromHead() -> Element? {
        guard !isEmpty else {
            return nil
        }
        var deletedElement = container.removeFirst()
        removeFromSet(deletedElement)
        return deletedElement
    }
    
    mutating func removeFromEnd() -> Element? {
        guard !isEmpty else {
            return nil
        }
        var deletedElement = container.removeLast()
        removeFromSet(deletedElement)
        return deletedElement
    }
}


// -----------------
//Двойная очередь с уникальными элементами/Unique Deque (Equatable)

struct UniqueDeque<Element: Equatable> {
    private var container: [Element] = []
    
    var isEmpty: Bool { return container.isEmpty }     
    var size: Int { return container.count }   
    var head: Element? { return container.first }  
    var tail: Element? { return container.last }

    func isExist(_ element: Element) -> Bool {
        return container.contains(element)
    }

    mutating func addToHead(_ element: Element) -> () {
        guard !isExist(element) else {
            return print("This element has already exist")
        }
        container.insert(element, at: 0)
        print("Element was added!")
    }
    
    mutating func addToEnd(_ element: Element) -> () {
        guard !isExist(element) else {
            return print("This element has already exist")
        }
        container.append(element)
        print("Element was added!")
    }
    
    mutating func removeFromHead() -> Element? {
        guard !isEmpty else {
            return nil
        }
        return container.removeFirst()
    }
    
    mutating func removeFromEnd() -> Element? {
        guard !isEmpty else {
            return nil
        }
        return container.removeLast()
    }
}
