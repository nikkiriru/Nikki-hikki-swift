// 1. Создать класс Клиент Банка. 
// Задать ему свойства Наименование, баланс счёта, e-mail, телефон. 
// Клиентами банка могут быть как физические, так и юридические лица. 
// Создайте инициализатор, который принимает наименование клиента целиком и контактные данные. 
// Баланс счёта в этом случае должен быть равен 0. 
// Создайте «удобные» инициализаторы, которые принимают либо Фамилию, имя, отчество для физ. лиц, 
// либо форму собственности (ООО, ПАО, АО) для юридических лиц, а также начальный баланс счёта клиента. 
// Проинициализируйте класс. Создайте три экземпляра класса, используя разные инициализаторы. 
// Добавьте их в массив Клиенты Банка.

import Foundation

class BankClient {
    var accountFullName: String
    var accountBalance: Double
    var accountEmail: String
    var accountPhone: Int

    init(acFullName: String, acBalance: Double = 0.0, acEmail: String, acPhone: Int) {
        self.accountFullName = acFullName
        self.accountBalance = acBalance
        self.accountEmail = acEmail
        self.accountPhone = acPhone
    }

    convenience init(acName: String, acSurname: String, acPatronymic: String, 
                    acBalance: Double, acEmail: String, acPhone: Int) {
                    self.init(acFullName: "\(acName) \(acSurname) \(acPatronymic)", 
                                acBalance: acBalance, 
                                acEmail: acEmail, 
                                acPhone: acPhone)
    }
    convenience init(acOwnForm: String, acName: String, 
                    acBalance: Double, acEmail: String, acPhone: Int) {
                    self.init(acFullName: "\(acOwnForm) \(acName)", 
                            acBalance: acBalance, 
                            acEmail: acEmail, 
                            acPhone: acPhone)
    }
}

let satoshi = BankClient(acFullName: "智 大野", 
                        acBalance: 0.0, 
                        acEmail: "satoshifirst@gmail.com", 
                        acPhone: 818072467168)

let lev = BankClient(acName: "Lev", 
                    acSurname: "Bolshoy", 
                    acPatronymic: "Tolstiy", 
                    acBalance: 2000, 
                    acEmail: "bigfattylion@gmail.com", 
                    acPhone: 79090909099)

let rogaKopita = BankClient(acOwnForm: "OOO", 
                            acName: "Roga&Kopita", 
                            acBalance: 100, 
                            acEmail: "hornsandhooves@mail.ru", 
                            acPhone: 88005353535)

var clients: [BankClient] = []
clients.append(satoshi)
clients.append(lev)
clients.append(rogaKopita)

for client in clients {
    print(client.accountFullName)
}

// 2. Создайте класс Программист, объявите целочисленное свойство - опыт в годах, 
// строковое свойство Специализация и строковое свойство - Квалификация. 
// Создайте инициализатор, который принимает в себя опыт в годах и специализацию. 
// Квалификация определяется в инициализаторе следующим образом: 
// Стажёр 0-1 год, Junior 1-3 года, Middle - 3-5 лет, Senior - от 5 лет.

class Developer {
    var yearsExperience: Int
    var specialization: String
    var qualification: String

    init(exp: Int, spec: String) {
    self.yearsExperience = exp
    self.specialization = spec
    switch exp{
        case 0..<1: self.qualification = "trainee"
        case 1..<3: self.qualification = "Junior"
        case 3..<5: self.qualification = "Middle"
        default: self.qualification = "Senior"
    }
    }
}

let misha = Developer(exp: 0, spec: "Frontend")
let boris = Developer(exp: 1, spec: "Backend")
let oliver = Developer(exp: 2, spec: "Android")
let nathan = Developer(exp: 3, spec: "iOS")
let maggy = Developer(exp: 4, spec: "Unity")
let kristine = Developer(exp: 5, spec: "Security")
let grandma = Developer(exp: 6, spec: "Full-Stack")

print(misha.qualification)
print(boris.qualification)
print(oliver.qualification)
print(nathan.qualification)
print(maggy.qualification)
print(kristine.qualification)
print(grandma.qualification)

// 3. Создать класс Круг с хранимым свойством Радиус. 
// Добавить ему вычисляемые свойства - длина окружности и площадь круга. 
// Добавить метод "Вытянуть в цилиндр", который принимает высоту цилиндра и возвращает объем цилиндра

class Circle{
    let radius: Double

    var circumference: Double {
        let lenght = 2 * Double.pi * radius
        return lenght
    }
    var circleArea: Double {
        let sqare = Double.pi * (radius * radius)
        return sqare
    }
    init(rad: Double){
        self.radius = rad
    } 

    func pullIntoCylinder(height: Double) -> Double {
        let sqare = circleArea * height
        return sqare
    }
}

let myCircle = Circle(rad: 0.5)
print(myCircle.circumference)
print(myCircle.circleArea)
let myCylinder = myCircle.pullIntoCylinder(height: 10)
print(myCylinder)

// 4. Создать класс Кофе-машина
// Определить хранимые свойства:
// -  Марка (константа)
// - Мощность (константа)
// - Гарантированный ресурс (в кружках кофе, константа, приватная)
// - Выработанный ресурс (в кружках кофе переменная, приватная)
// Определить вычисляемое свойство - остаток ресурса (Гарантированный минус выработанный)
// Определить методы, отвечающие за кипячение воды и за подсчёт количества приготовленных кружек кофе. 
// Первый принтит в консоль «Вода горячая», а второй добавляет к выработанному ресурсу +1
// и выводит в консоль сообщение типа «Вы приготовили 15 из 300 гарантированных кружек кофе». 
// Если кружек больше 300, тогда метод выдаэт предупреждение, что нужно обслуживание кофе-машины
// Определить метод, отвечающий за процесс приготовления кофе, 
// который включает в себя вызов двух методов, описанных выше, и принт «Ваш кофе готов!»
// Определить метод обслуживания кофе-машины, который обнуляет гарантированный счётчик

class CoffeeMachine{
    let brand: String
    let power: String
    private let guarantee: Int
    private var exhausted: Int

    var remainder: Int {
        var cups = guarantee - exhausted
        return cups
    }
    
    init(brand: String, power: String, guarantee: Int, exhausted: Int){
        self.brand = brand
        self.power = power
        self.guarantee = guarantee
        self.exhausted = exhausted
    }

    func boiling(){
        print("The water is hot")
    }
    func countingCups(){
        exhausted += 1
        print("You've made \(exhausted) out of \(guarantee) guaranteed cups of coffee")
        if exhausted > guarantee {
            print("WARNING!!! Coffee machine service required!")
        }
    }
    func makingCoffee(){
        boiling()
        countingCups()
        print("Your coffee is ready!")
    }
    func machineService(){
        exhausted = 0
    }
}

let myCoffee = CoffeeMachine(brand: "EspressoLover", 
                            power: "1500 watt", 
                            guarantee: 1000, 
                            exhausted: 998)

myCoffee.makingCoffee()
myCoffee.makingCoffee()
myCoffee.makingCoffee()
myCoffee.machineService()
myCoffee.makingCoffee()
